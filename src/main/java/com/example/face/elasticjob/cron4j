cron4j调度框架
    一 表达式
        支持的表达式类似于unix定时任务的字符串表达式
        目前支持由七部分组成，中间由空格构成，

        英文字段名	        中文字段名	合法值	                                                            允许的特殊字符
        Seconds	            秒	        0 - 59	                                                            , - * /
        Minutes	            分钟	        0 - 59	                                                            , - * /
        Hours	            小时	        0 - 23	                                                            , - * /
        Day-of-Month	    日期	        1 - 月最后一天	                                                    , - * / ? L W
        Month	            月份	        1 - 12 或 JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC	, - * /
        Day-of-Week	        星期几	    1 - 7(1表示星期日,即从星期日开始) 或 SUN, MON, TUE, WED, THU, FRI, SAT	, - * / ? L #
        Year (optional field)	年(可选项)	1970-2099，一般该项不设置，直接忽略掉，即可为空值	                    , - * /

        ，用来定义列表
            1,3,5 * * * * ? 每1，3，5分
        - 用来定义范围
            1-5 * * * * ? 第1至5秒
        * 用来表示当前字段的每一个合法值
        / 表示阶段增加
            0 1/5 * * * ? 每五分钟
        ？只用在Day-of-Month字段和Day-of-Week字段中，这两个字段是互斥的，即如果其中一个字段设置了值，则另一个必须设置为 “ ? ”
        W 只用在Day-of-Month字段中，表示最接近某一天的工作日(weekday)，W不会跨月
            * * * 15W * ? 最接近15号的工作日
        # 只用在Day-of-Week字段中，表示第几个星期几
            * * * ? * 6#3 表示每月的第三个星期五
        L last的意思，只用在Day-of-Month字段和Day-of-Week**字段中，在这俩字段中意义不同。
          1、若在Day-of-Month中，表示每个月的最后一天，例如：在一月份中表示31号，在六月份中表示30号，在闰年二月份中表示29号，平年二月份表示28号。也可以使用偏移量的写法，例如：L-3表示每个月的倒数第3天。举例如下：
            * * * L * ? 表示每月最后一天
            * * * L-3 * ? 表示每月倒数第3天
            * * * LW * ? LW可以连起来用，表示每月最后一个工作日，即每月最后一个星期五
          2、若在Day-of-Week中，仅表示7或者SAT，但是，若前面有其他值的话，则表示最后一个星期几，例如：
            * * * ? * L 表示每个星期六
            * * * ? * 6L
            * * * ? * FRIL 表示同一个意思，即每月的最后一个星期五

        (1) 0 0 2 1 * ? * 表示在每月的1日的凌晨2点调整任务

        (2) 0 15 10 ? * MON-FRI 表示周一到周五每天上午10:15执行作业

        (3) 0 15 10 ? 6L 2002-2006 表示2002-2006年的每个月的最后一个星期五上午10:15执行作

        (4) 0 0 10,14,16 * * ? 每天上午10点，下午2点，4点

        (5) 0 0/30 9-17 * * ? 朝九晚五工作时间内每半小时

        (6) 0 0 12 ? * WED 表示每个星期三中午12点

        (7) 0 0 12 * * ? 每天中午12点触发

        (8) 0 15 10 ? * * 每天上午10:15触发

        (9) 0 15 10 * * ? 每天上午10:15触发

        (10) 0 15 10 * * ? * 每天上午10:15触发

        (11) 0 15 10 * * ? 2005 2005年的每天上午10:15触发

        (12) 0 * 14 * * ? 在每天下午2点到下午2:59期间的每1分钟触发

        (13) 0 0/5 14 * * ? 在每天下午2点到下午2:55期间的每5分钟触发

        (14) 0 0/5 14,18 * * ? 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发

        (15) 0 0-5 14 * * ? 在每天下午2点到下午2:05期间的每1分钟触发

        (16) 0 10,44 14 ? 3 WED 每年三月的星期三的下午2:10和2:44触发

        (17) 0 15 10 ? * MON-FRI 周一至周五的上午10:15触发

        (18) 0 15 10 15 * ? 每月15日上午10:15触发

        (19) 0 15 10 L * ? 每月最后一日的上午10:15触发

        (20) 0 15 10 ? * 6L 每月的最后一个星期五上午10:15触发

        (21) 0 15 10 ? * 6L 2002-2005 2002年至2005年的每月的最后一个星期五上午10:15触发

        (22) 0 15 10 ? * 6#3 每月的第三个星期五上午10:15触发

        (23) 0 1/5 * * * ? 每五分钟执行一次
    二 实现原理
    @Test
        public void t_cron4j(){
            // 不知道引的什么包，jdk没有，quartz是interface
            Scheduler s = new Scheduler();
            s.schedule("*/3 * * * * *", new Runnable() {
                int i = 0;
                public void run() {
                    i++;
                    System.out.println("Another minute ticked away..."+System.currentTimeMillis()/1000);
                }
            });
            // Starts the scheduler.
            s.start();
            // Will run for ten minutes.
            try {
                Thread.sleep(1000L * 60L * 10L);
            } catch (InterruptedException e) {
                ;
            }
            // Stops the scheduler.
            s.stop();
        }
        Scheduler调用schedule方法添加一个线程，在Scheduler掉头start方法是会创建一个一直执行的线程TimerThread
        public void start() throws IllegalStateException {
            synchronized (lock) {
                if (started) {
                    throw new IllegalStateException("Scheduler already started");
                }
                // Initializes required lists.
                launchers = new ArrayList();
                executors = new ArrayList();
                // Starts the timer thread.
                //创建线程执行
                timer = new TimerThread(this);
                timer.setDaemon(daemon);
                timer.start();
                // Change the state of the scheduler.
                started = true;
            }
        }
        在TimerThread线程run方法中会一直执行线程，每隔一秒会计算检查cron表达式对应的定时任务规则，如果匹配则执行任务。
        （1）首先会获取下一秒时间
        （2）计算当前时间与下一秒时间差
        （3）如果时间差超过1秒，则可能存在时间跳变情况，忽略重新计算
        （4）睡眠时间差时间
        （5）调用scheduler.spawnLauncher(millis);方法计算是否存在任务在这个时间点需要执行（每隔一秒计算一次）
        public void run() {
            // What time is it?
            long millis = System.currentTimeMillis();
            // Work until the scheduler is started.
            //保持线程存货
            for (;;) {
                // Calculating next seconds.
                //获取当前时间的下一秒
                long nextSecond = ((System.currentTimeMillis() / 1000) + 1) * 1000;
                // Coffee break 'till next seconds comes!
                //获取当前时间
                long sleepTime = (nextSecond - System.currentTimeMillis());
                //time is changed
                //如果存在时间跳变情况则直接忽略
                if(sleepTime > 1000) {
                    continue;
                }
                //进行睡眠
                if (sleepTime > 0) {
                    try {
                        safeSleep(sleepTime);
                    } catch (InterruptedException e) {
                        // Must exit!
                        break;
                    }
                }
                millis = System.currentTimeMillis();
                // Launching the launching thread!
                //计算是否要进行任务执行
                scheduler.spawnLauncher(millis);
            }
            scheduler = null;
        }
        在Scheduler的spawnLauncher中会新起一个线程LauncherThread去分别计算是否定时任务与当时时间匹配，如果匹配则执行
        LauncherThread spawnLauncher(long referenceTimeInMillis) {
            TaskCollector[] nowCollectors;
            synchronized (collectors) {
                int size = collectors.size();
                nowCollectors = new TaskCollector[size];
                for (int i = 0; i < size; i++) {
                    nowCollectors[i] = (TaskCollector) collectors.get(i);
                }
            }
            //新起任务去进行规制计算并执行
            LauncherThread l = new LauncherThread(this, nowCollectors,
                    referenceTimeInMillis);
            synchronized (launchers) {
                launchers.add(l);
            }
            l.setDaemon(daemon);
            l.start();
            return l;
        }
        在LauncherThread中会根据cron表达式与当前时间进行匹配，如果匹配成功则将相应的任务添加到线程池中去执行
        public void run() {
            outer: for (int i = 0; i < collectors.length; i++) {
                TaskTable taskTable = collectors[i].getTasks();
                int size = taskTable.size();
                for (int j = 0; j < size; j++) {
                    if (isInterrupted()) {
                        break outer;
                    }
                    SchedulingPattern pattern = taskTable.getSchedulingPattern(j);
                    //cron表达式与当前时间进行匹配
                    if (pattern.match(scheduler.getTimeZone(), referenceTimeInMillis)) {
                        Task task = taskTable.getTask(j);
                        //任务添加到线程池中执行
                        scheduler.spawnExecutor(task);
                    }
                }
            }
            // Notifies completed.
            scheduler.notifyLauncherCompleted(this);
        }
        任务添加到线程池中进行执行
        TaskExecutor spawnExecutor(Task task) {
            TaskExecutor e = new TaskExecutor(this, task);
            synchronized (executors) {
                executors.add(e);
            }
            e.start(daemon);
            return e;
        }